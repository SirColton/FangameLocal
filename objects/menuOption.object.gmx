<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Init
s = 0;
xSelector = 124;
ySelector = 196;
xSeperation = 500;
ySeperation = 48;

// Selector
strSelector[0] = "Music";
strSelector[1] = "Screen";
strSelector[2] = "Blood";
strSelector[3] = "GUI Position";
strSelector[4] = "GUI Delay";
strSelector[5] = "Controls";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(global.downbutton)) {
    s += 1
    audio_play_sound(sndJump,0,0);
    if s &gt; 5 { s = 0; }
} else if (keyboard_check_pressed(global.upbutton)) {
    s -= 1
    audio_play_sound(sndJump,0,0);
    if s &lt; 0 { s = 5; }
} else if(keyboard_check_pressed(global.shotbutton)) { 
    saveGlobals(); 
    room_goto(rTitle); 
} else if (keyboard_check_pressed(global.jumpbutton)) {
    // Music
    if s = 0 {
        global.isMusicOn =!global.isMusicOn;
        musicFunctions();
    }
    //Screen 
    else if s = 1 {
        global.isFullscreen = !global.isFullscreen;
        window_set_fullscreen(global.isFullscreen);
    }
    // Blood
    else if s = 2 {
        global.bloodLevel-=1;
        if (global.bloodLevel&lt;0)global.bloodLevel=3;
    }
    // GUI Position
    else if s = 3 {
        global.guiPosition-=1;
        if (global.guiPosition&lt;0)global.guiPosition=2;
    }
    // GUI Delay
    else if s = 4 {
        switch (global.guiDelay) {
        case 5: global.guiDelay=3; break;
        case 3: global.guiDelay=2; break;
        case 2: global.guiDelay=1; break;
        case 1: global.guiDelay=5; break;
        default: global.guiDelay=3; break;
        }
    }
    // Controls
    else if s = 5 {
        room_goto(rOption2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_set_font(font40);
draw_set_halign(fa_left);
draw_set_valign(fa_center);

for(iii=0;iii&lt;6;iii+=1;){
    draw_text(xSelector,ySelector+(ySeperation*iii),strSelector[iii]);
}

draw_set_halign(fa_right);
// Draw music ON/OFF
if (global.isMusicOn) { draw_text(xSelector+xSeperation,ySelector,"ON"); }
else { draw_text(xSelector+xSeperation,ySelector,"OFF"); }
// Draw screen FULL/WINDOW
if (global.isFullscreen) { draw_text(xSelector+xSeperation,ySelector+ySeperation,"FULL"); }
else { draw_text(xSelector+xSeperation,ySelector+ySeperation,"WINDOW"); }
// Draw blood FULL/HALF/QUARTER/OFF
switch (global.bloodLevel) {
case 3: draw_text(xSelector+xSeperation,ySelector+ySeperation*2,"FULL"); break;
case 2: draw_text(xSelector+xSeperation,ySelector+ySeperation*2,"HALF"); break;
case 1: draw_text(xSelector+xSeperation,ySelector+ySeperation*2,"QUARTER"); break;
case 0: draw_text(xSelector+xSeperation,ySelector+ySeperation*2,"OFF"); break;
}
// Draw GUI Position TOP/BOTTOM/OFF
switch (global.guiPosition) {
case 2: draw_text(xSelector+xSeperation,ySelector+ySeperation*3,"TOP"); break;
case 1: draw_text(xSelector+xSeperation,ySelector+ySeperation*3,"BOTTOM"); break;
case 0: draw_text(xSelector+xSeperation,ySelector+ySeperation*3,"OFF"); break;
}
// Draw GUI Delay 10/5/3/1
draw_text(xSelector+xSeperation,ySelector+ySeperation*4,string(global.guiDelay));

draw_sprite(sprPlayerIdle,0,xSelector-16,ySelector+(ySeperation*s));

// Info
draw_set_font(font12);
draw_set_halign(fa_left);
draw_text(32,568,"[ " + controlIndex(global.shotbutton) + " ] Back");
draw_set_halign(fa_right);
draw_text(768,568,"[ " + controlIndex(global.jumpbutton) + " ] Accept");
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
