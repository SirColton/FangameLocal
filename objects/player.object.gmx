<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprMaskPlayer_new</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = false; // 操作を禁止しているときはtrue、普通はfalse
jump = 8.5; // １段目のジャンプの初速度
jump2 = 7; // ２段目のジャンプの初速度
djump = true; // ２段目のジャンプが可能ならtrue、不可能ならfalse
maxSpeed = 3; // 左右の移動速度（hspeed）
gravity = 0.4; // 重力
maxFallSpeed = 8; // 最大落下速度
maxVspeed = 9; // 上下の最大速度（vspeed）
maxVspeed2 = 9
image_speed = 0.2; // アニメーションの速度
onPlatform = 0;
writeRoomCaption();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_meeting(x,y,playerKiller)) {
    killPlayer();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var L,R,h;

//左右のキー入力のチェック
L = keyboard_check_direct(global.leftbutton);
R = keyboard_check_direct(global.rightbutton);

// 右ボタンを押していれば右
// 右ボタンを押していない状態で左ボタンを押していれば左
h = R;
if (h == 0) {
    h = -L;
}

// frozenに値が入っていれば行動禁止
if (frozen == true) {
    h = 0;
}

// 左右の移動
if (h != 0) {
    // 走っている状態にする
    hspeed = maxSpeed*h;
    // 画像の左右を指定（負が入ると画像が左右反転する）
    flip=(image_xscale!=h);
    image_xscale = h;
    
    // 走っている画像に変更
    sprite_index = sprPlayerRunning;
    image_speed = 0.5;
} else {
    // 直立状態にする
    hspeed = 0;
    // 直立画像に変更
    sprite_index = sprPlayerIdle;
    image_speed = 0.2;
}


if (onPlatform == false) {
    // ジャンプ・落下画像に変更
    if (vspeed &lt; -0.05) {
        sprite_index = sprPlayerJump;
    }
    if (vspeed &gt; 0.05) {
        sprite_index = sprPlayerFall;
    }
}
else { // 動く台に乗ってる状態から解除された瞬間
    if (place_meeting(x,y+4,platform) == false) {
        onPlatform = 0;
    }
}

// vspeedが最大値を超えたら、最大値に固定
if (abs(vspeed) &gt; maxVspeed) {
    vspeed = sign(vspeed)*maxVspeed;
}

// frozenに値が入っていない（行動可能）
if (frozen == false) {
    // プレイヤーの攻撃
    if (keyboard_check_pressed(global.shotbutton)) {
        playerShoot();
    }
    // ジャンプ（押した）
    if (keyboard_check_pressed(global.jumpbutton)) {
        playerJump();
    }
    // ジャンプ（離した）
    if (keyboard_check_released(global.jumpbutton)) {
        playerVJump();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_free(x+hspeed,y) == false) {
    if (hspeed &lt;= 0) {    // 左
        move_contact_solid(180,abs(hspeed));
    }
    if (hspeed &gt; 0) {    // 右
        move_contact_solid(0,abs(hspeed));
    }
    hspeed = 0;
}

// strange bug in GM studio - keep player from turning around and getting stuck in the wall behind him
if (!place_free(x,y)) {
    if (place_free(x-1,y)) x-=1;
    else if (place_free(x+1,y)) x+=1;
}

// 上下に壁がある時  
if (place_free(x,y+vspeed) == false) {
    if (vspeed &lt;= 0) {    // 上
        move_contact_solid(90,abs(vspeed));
        y=ceil(y);
    }
    if (vspeed &gt; 0) {    // 下
        move_contact_solid(270,abs(vspeed));
        djump = true;
    }
    vspeed = 0;
}

// 斜めの位置に壁がある時
if (place_free(x+hspeed,y+vspeed) == false) {
    hspeed=0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>killPlayer()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x;
y = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 画面の外に出たときの判定
var changeRoom,roomTo;

// ルームの外に居るかどうかのチェック
changeRoom = outsideRoom();

if (changeRoom == true) {
    // 近くにroomChangerが有れば、そのroomToのルームに移動。無ければ死亡
    if (place_meeting(x,y,roomChanger) == false) {
        killPlayer();
    } else {
        roomTo = instance_position(x,y,roomChanger).roomTo;  
        room_goto(roomTo);
    }
    
    // 座標合わせ（ルームのサイズが同じでないと挙動が変になります）
    if (x &lt; 0) {
        x = room_width-16;
        y -= vspeed;
        changeRoom = true;
    } else if (x &gt; room_width) {
        x = 16;
        y -= vspeed;
        changeRoom = true;
    } else if (y &lt; 0) {
        y = room_height-16;
        x = xprevious;
        changeRoom = true;
    } else if (y &gt; room_height) {
        y = 16;
        x = xprevious;
        changeRoom = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x;
y = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>17,23</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
