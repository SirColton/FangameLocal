<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shader uniform setup

//if shaders are unsupported on this device (unlikely) then just don't do anything
if (!shaders_are_supported()) {
    instance_destroy();
    exit;
}

//set these yourself:
wavelength=1/5.0; //units of "screens" (1/5 = 5 waves per screen)
frequency=1.5; //hertz (1.5 = 1.5 waves per second)
amplitude=0; //units of screens (1 = distort one screens length)
amplitude_delta=0.15/room_speed; //units of screens per tick (0.15/room_speed = amplitude increases by 0.15 every second)

//leave this alone:
time = 0;
die=false;
//these are our "hooks" into the shader program
uni_time = shader_get_uniform(shd_wave,"time");
u_wavelength = shader_get_uniform(shd_wave,"wavelength");
u_frequency = shader_get_uniform(shd_wave,"frequency");
u_amplitude = shader_get_uniform(shd_wave,"amplitude");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//keep the player frozen while we warp
with (player) frozen=true;

if (!die) amplitude += amplitude_delta;
else {
    amplitude -= amplitude_delta;
    if (amplitude&lt;=0) {
        with (player) frozen=false;
        instance_destroy();
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//when the room ends, set the object to die out
die=true;

if (keyboard_check_pressed(ord('R'))) {
    //destroy the effect if you restart during it
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the shader effect

//leave this as is; time is in units of seconds
time+=1/room_speed;
    
//set our shader
shader_set(shd_wave);
    //pass all our values to the shader program
    shader_set_uniform_f(uni_time, time);
    shader_set_uniform_f(u_wavelength, wavelength);
    shader_set_uniform_f(u_frequency, frequency);
    shader_set_uniform_f(u_amplitude, amplitude);
    
    //set the blend mode so that the stage doesn't "leak through" transparent areas
    draw_set_blend_mode_ext(bm_one,bm_zero);
    //and redraw the screen
    draw_surface(application_surface,0,0);
    draw_set_blend_mode(bm_normal);
shader_reset();



if (keyboard_check_direct(vk_space)) {
    draw_surface(application_surface,0,0);
    shader_reset();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
